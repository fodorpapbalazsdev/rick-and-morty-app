{
    "pipes": [],
    "interfaces": [
        {
            "name": "ApiResponse",
            "id": "interface-ApiResponse-0dda53a4df4d05ee85f090fb36be4103",
            "file": "src/app/core/models/api-response-model.ts",
            "type": "interface",
            "sourceCode": "import {Character} from './character.model';\n\nexport interface ApiResponse {\n  info: {\n    count: number,\n    pages: number,\n    next: string,\n    prev: string\n  };\n  results: Character[];\n}\n",
            "properties": [
                {
                    "name": "info",
                    "type": "literal type",
                    "optional": false,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "results",
                    "type": "Character[]",
                    "optional": false,
                    "description": "",
                    "line": 10
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        },
        {
            "name": "Character",
            "id": "interface-Character-15602c54b07fb6551133d64019780dca",
            "file": "src/app/core/models/character.model.ts",
            "type": "interface",
            "sourceCode": "export interface Character {\n  id: number;\n  name: string;\n  status: string;\n  species: string;\n  type: string;\n  gender: string;\n  created: string;\n  image: string;\n  location: {\n    name: string,\n    url: string\n  };\n}\n",
            "properties": [
                {
                    "name": "created",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 8
                },
                {
                    "name": "gender",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "id",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 2
                },
                {
                    "name": "image",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 9
                },
                {
                    "name": "location",
                    "type": "literal type",
                    "optional": false,
                    "description": "",
                    "line": 10
                },
                {
                    "name": "name",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 3
                },
                {
                    "name": "species",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "status",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "type",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 6
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        },
        {
            "name": "DialogData",
            "id": "interface-DialogData-6228d2535bac07fde6c9e9eadbbdc595",
            "file": "src/app/core/components/dialogs/not-alive-character-dialog/not-alive-character-dialog.component.ts",
            "type": "interface",
            "sourceCode": "import {Component, Inject, OnInit} from '@angular/core';\nimport {MAT_DIALOG_DATA} from '@angular/material/dialog';\n\nexport interface DialogData {\n  from: 'character-list-item' | 'character-alive-guard';\n}\n\n@Component({\n  selector: 'app-not-alive-character-dialog',\n  templateUrl: './not-alive-character-dialog.component.html',\n  styleUrls: ['./not-alive-character-dialog.component.scss']\n})\nexport class NotAliveCharacterDialogComponent implements OnInit {\n\n  constructor(@Inject(MAT_DIALOG_DATA) public data: DialogData) { }\n\n  ngOnInit(): void {\n  }\n}\n",
            "properties": [
                {
                    "name": "from",
                    "type": "\"character-list-item\" | \"character-alive-guard\"",
                    "optional": false,
                    "description": "",
                    "line": 5
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        },
        {
            "name": "DialogData",
            "id": "interface-DialogData-a26ea4057c996dbeeb5f2d65bd725320-1",
            "file": "src/app/core/components/dialogs/warning-message-dialog/warning-message-dialog.component.ts",
            "type": "interface",
            "sourceCode": "import {Component, Inject, OnInit} from '@angular/core';\nimport {MAT_DIALOG_DATA} from '@angular/material/dialog';\n\nexport interface DialogData {\n  why: 'no-character-found';\n}\n\n@Component({\n  selector: 'app-warning-message-dialog',\n  templateUrl: './warning-message-dialog.component.html',\n  styleUrls: ['./warning-message-dialog.component.scss']\n})\nexport class WarningMessageDialogComponent implements OnInit {\n\n  constructor(@Inject(MAT_DIALOG_DATA) public data: DialogData) { }\n\n  ngOnInit(): void {\n  }\n\n}\n",
            "properties": [
                {
                    "name": "why",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 5
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": [],
            "isDuplicate": true,
            "duplicateId": 1,
            "duplicateName": "DialogData-1"
        }
    ],
    "injectables": [
        {
            "name": "CharacterService",
            "id": "injectable-CharacterService-7fdd78dd8d300b6c7468a723f58297ca",
            "file": "src/app/core/services/character.service.ts",
            "properties": [
                {
                    "name": "REST_API_URL",
                    "defaultValue": "'https://rickandmortyapi.com/api'",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 11,
                    "modifierKind": [
                        112
                    ]
                }
            ],
            "methods": [
                {
                    "name": "get",
                    "args": [
                        {
                            "name": "url",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "Promise<ApiResponse>",
                    "typeParameters": [],
                    "line": 44,
                    "modifierKind": [
                        120
                    ],
                    "jsdoctags": [
                        {
                            "name": "url",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getAllCharacters",
                    "args": [],
                    "optional": false,
                    "returnType": "Promise<Character[]>",
                    "typeParameters": [],
                    "line": 21,
                    "modifierKind": [
                        120
                    ]
                },
                {
                    "name": "getCharacterById",
                    "args": [
                        {
                            "name": "id",
                            "type": "number"
                        }
                    ],
                    "optional": false,
                    "returnType": "Promise<Character>",
                    "typeParameters": [],
                    "line": 25,
                    "modifierKind": [
                        120
                    ],
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "number",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getCharactersByNameAndStatus",
                    "args": [
                        {
                            "name": "name",
                            "type": "string"
                        },
                        {
                            "name": "status",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "Promise<Character[]>",
                    "typeParameters": [],
                    "line": 16,
                    "modifierKind": [
                        120
                    ],
                    "jsdoctags": [
                        {
                            "name": "name",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "status",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getCharactersIterative",
                    "args": [
                        {
                            "name": "url",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "Promise<Character[]>",
                    "typeParameters": [],
                    "line": 29,
                    "modifierKind": [
                        120
                    ],
                    "jsdoctags": [
                        {
                            "name": "url",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "description": "",
            "sourceCode": "import {Injectable} from '@angular/core';\nimport {HttpClient} from '@angular/common/http';\nimport {Character} from '../models/character.model';\nimport {ApiResponse} from '../models/api-response-model';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class CharacterService {\n\n  private REST_API_URL = 'https://rickandmortyapi.com/api';\n\n  constructor(private http: HttpClient) {\n  }\n\n  async getCharactersByNameAndStatus(name: string, status: string): Promise<Character[]> {\n    const url = this.REST_API_URL + '/character?name=' + name + '&status=' + status;\n    return this.getCharactersIterative(url);\n  }\n  \n  async getAllCharacters(): Promise<Character[]> {\n    return this.getCharactersIterative(this.REST_API_URL + '/character');\n  }\n\n  async getCharacterById(id: number): Promise<Character> {\n    return await this.http.get<Character>(this.REST_API_URL + '/character/' + id).toPromise();\n  }\n\n  async getCharactersIterative(url: string): Promise<Character[]> {\n    const characters = new Array<Character>();\n    let res = await this.get(url);\n    for (let i = 1; i <= res.info.pages; i++) {\n      const correctUrl = url.includes('?') ? url + '&page=' + i : url + '?page=' + i;\n      res = await this.get(correctUrl);\n      res.results.forEach((c: Character) => {\n        characters.push(c);\n      });\n    }\n    return new Promise((resolve, reject) => {\n      resolve(characters);\n    });\n  }\n\n  async get(url: string): Promise<ApiResponse> {\n    return await this.http.get<ApiResponse>(url).toPromise();\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "http",
                        "type": "HttpClient"
                    }
                ],
                "line": 11,
                "jsdoctags": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        }
    ],
    "classes": [
        {
            "name": "AppPage",
            "id": "class-AppPage-ee2067dfb1c303f41003aea7d82d51e0",
            "file": "e2e/src/app.po.ts",
            "type": "class",
            "sourceCode": "import { browser, by, element } from 'protractor';\n\nexport class AppPage {\n  async navigateTo(): Promise<unknown> {\n    return browser.get(browser.baseUrl);\n  }\n\n  async getTitleText(): Promise<string> {\n    return element(by.css('app-root .content span')).getText();\n  }\n}\n",
            "properties": [],
            "methods": [
                {
                    "name": "getTitleText",
                    "args": [],
                    "optional": false,
                    "returnType": "Promise<string>",
                    "typeParameters": [],
                    "line": 8,
                    "modifierKind": [
                        120
                    ]
                },
                {
                    "name": "navigateTo",
                    "args": [],
                    "optional": false,
                    "returnType": "Promise<unknown>",
                    "typeParameters": [],
                    "line": 4,
                    "modifierKind": [
                        120
                    ]
                }
            ],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "PageConfig",
            "id": "class-PageConfig-04429747e52336acfc30528e0f618e29",
            "file": "src/app/core/components/characters/character-list/character-simple-list/page-config.ts",
            "type": "class",
            "sourceCode": "export class PageConfig {\n  numberOfListedCharacter: number;\n  numberOfPages: number;\n  currentPageIndex: number;\n  pageNumbers: Array<number>;\n\n  getCorrectNumOfListedCharacter(value: number, numberOfItems: number): number {\n    if (value > numberOfItems) {\n      return numberOfItems;\n    } else if (value < 1) {\n      return 1;\n    } else if (value % 1) {\n      return Math.floor(value);\n    } else {\n      return value;\n    }\n  }\n}\n",
            "properties": [
                {
                    "name": "currentPageIndex",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "numberOfListedCharacter",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 2
                },
                {
                    "name": "numberOfPages",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 3
                },
                {
                    "name": "pageNumbers",
                    "type": "Array<number>",
                    "optional": false,
                    "description": "",
                    "line": 5
                }
            ],
            "methods": [
                {
                    "name": "getCorrectNumOfListedCharacter",
                    "args": [
                        {
                            "name": "value",
                            "type": "number"
                        },
                        {
                            "name": "numberOfItems",
                            "type": "number"
                        }
                    ],
                    "optional": false,
                    "returnType": "number",
                    "typeParameters": [],
                    "line": 7,
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "number",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "numberOfItems",
                            "type": "number",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        }
    ],
    "directives": [
        {
            "name": "CharacterStatusDirectiveDirective",
            "id": "directive-CharacterStatusDirectiveDirective-8ef9b15a96b38a814fe643c389194788",
            "file": "src/app/core/components/directives/character-status-directive.directive.ts",
            "type": "directive",
            "description": "",
            "sourceCode": "import {Directive, ElementRef, Input, OnChanges, OnInit, SimpleChanges} from '@angular/core';\n\n@Directive({\n  selector: '[appCharacterStatusDirective]'\n})\nexport class CharacterStatusDirectiveDirective implements OnInit, OnChanges {\n\n  private element: ElementRef;\n\n  @Input('appCharacterStatusDirective') status: string;\n  @Input('appCharacterStatusStyle') style: string;\n\n\n  constructor(el: ElementRef) {\n    this.element = el;\n  }\n\n  ngOnInit(): void {\n    this.render();\n  }\n\n  ngOnChanges(changes: SimpleChanges): void {\n    this.render();\n  }\n\n  render(): void {\n    this.element.nativeElement.style.width = '50px';\n    this.element.nativeElement.style.height = '50px';\n    this.element.nativeElement.style.backgroundPosition = 'center';\n    this.element.nativeElement.style.backgroundRepeat = 'no-repeat';\n    this.element.nativeElement.style.backgroundSize = 'cover';\n\n    switch (this.status.toLowerCase()) {\n      case 'alive':\n        if (this.style === 'mouse-over') {\n          this.element.nativeElement.style.backgroundImage = 'url(/assets/character-status-icons/alive-status-icon-white.png)';\n        } else {\n          this.element.nativeElement.style.backgroundImage = 'url(/assets/character-status-icons/alive-status-icon.png)';\n        }\n        break;\n      case 'dead':\n        this.element.nativeElement.style.backgroundImage = 'url(/assets/character-status-icons/dead-status-icon.png)';\n        break;\n      default:\n        if (this.style === 'mouse-over') {\n          this.element.nativeElement.style.backgroundImage = 'url(/assets/character-status-icons/unknown-status-icon-white.png)';\n        } else {\n          this.element.nativeElement.style.backgroundImage = 'url(/assets/character-status-icons/unknown-status-icon.png)';\n        }\n    }\n  }\n\n\n}\n",
            "selector": "[appCharacterStatusDirective]",
            "providers": [],
            "inputsClass": [
                {
                    "name": "appCharacterStatusDirective",
                    "line": 10,
                    "type": "string"
                },
                {
                    "name": "appCharacterStatusStyle",
                    "line": 11,
                    "type": "string"
                }
            ],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "propertiesClass": [
                {
                    "name": "element",
                    "type": "ElementRef",
                    "optional": false,
                    "description": "",
                    "line": 8,
                    "modifierKind": [
                        112
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnChanges",
                    "args": [
                        {
                            "name": "changes",
                            "type": "SimpleChanges"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 22,
                    "jsdoctags": [
                        {
                            "name": "changes",
                            "type": "SimpleChanges",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 18
                },
                {
                    "name": "render",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 26
                }
            ],
            "implements": [
                "OnInit",
                "OnChanges"
            ],
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "el",
                        "type": "ElementRef"
                    }
                ],
                "line": 11,
                "jsdoctags": [
                    {
                        "name": "el",
                        "type": "ElementRef",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            }
        }
    ],
    "components": [
        {
            "name": "AboutComponent",
            "id": "component-AboutComponent-00fc00383686853d083515be1f90675c",
            "file": "src/app/core/components/about/about.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-about",
            "styleUrls": [
                "./about.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./about.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "elementToAnimates",
                    "defaultValue": "[\n    {\n      elementLoaded: false,\n      elementDelay: 400,\n    },\n    {\n      elementLoaded: false,\n      elementDelay: 700,\n    },\n    {\n      elementLoaded: false,\n      elementDelay: 800,\n    },\n    {\n      elementLoaded: false,\n      elementDelay: 1300,\n    },\n    {\n      elementLoaded: false,\n      elementDelay: 1500,\n    },\n    {\n      elementLoaded: false,\n      elementDelay: 2300,\n    },\n    {\n      elementLoaded: false,\n      elementDelay: 2600,\n    },\n    {\n      elementLoaded: false,\n      elementDelay: 3200,\n    },\n    {\n      elementLoaded: false,\n      elementDelay: 3500,\n    },\n    {\n      elementLoaded: false,\n      elementDelay: 3800,\n    }\n  ]",
                    "type": "[]",
                    "optional": false,
                    "description": "",
                    "line": 47
                },
                {
                    "name": "mouseOverAnimation",
                    "defaultValue": "'none'",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 89
                },
                {
                    "name": "pageLoaded",
                    "defaultValue": "false",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 46
                }
            ],
            "methodsClass": [
                {
                    "name": "getAppearAnimation",
                    "args": [
                        {
                            "name": "id",
                            "type": "number"
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 118,
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "number",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "mouseLeave",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 114
                },
                {
                    "name": "mouseOver",
                    "args": [
                        {
                            "name": "$mouseevent",
                            "type": "MouseEvent"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 109,
                    "jsdoctags": [
                        {
                            "name": "$mouseevent",
                            "type": "MouseEvent",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 94
                },
                {
                    "name": "starterAnimation",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 98
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import {Component, OnInit} from '@angular/core';\nimport {animate, state, style, transition, trigger} from '@angular/animations';\n\n@Component({\n  selector: 'app-about',\n  templateUrl: './about.component.html',\n  styleUrls: ['./about.component.scss'],\n  animations: [\n    trigger('elementAppearAnimation', [\n      state('disappear', style({\n        opacity: 0.0,\n      })),\n      state('pageAppear', style({\n        opacity: 1,\n      })),\n      transition('disappear => pageAppear', [\n        animate('0.7s')\n      ]),\n    ]),\n    trigger('translateYNegativeAnimation', [\n      state('translated', style({\n        transform: 'translateY(-50px)',\n      })),\n      state('notTranslated', style({\n        transform: 'translateX(0px)',\n      })),\n      transition('translated => notTranslated', [\n        animate('0.7s')\n      ]),\n    ]),\n    trigger('mouseOverAnimation', [\n      state('mouseOver', style({\n        transform: 'scale(1.2)',\n      })),\n      state('mouseLeave', style({\n        transform: 'scale(1)',\n      })),\n      transition('* => *', [\n        animate('0.3s')\n      ]),\n    ]),\n  ],\n})\nexport class AboutComponent implements OnInit {\n\n  pageLoaded = false;\n  elementToAnimates = [\n    {\n      elementLoaded: false,\n      elementDelay: 400,\n    },\n    {\n      elementLoaded: false,\n      elementDelay: 700,\n    },\n    {\n      elementLoaded: false,\n      elementDelay: 800,\n    },\n    {\n      elementLoaded: false,\n      elementDelay: 1300,\n    },\n    {\n      elementLoaded: false,\n      elementDelay: 1500,\n    },\n    {\n      elementLoaded: false,\n      elementDelay: 2300,\n    },\n    {\n      elementLoaded: false,\n      elementDelay: 2600,\n    },\n    {\n      elementLoaded: false,\n      elementDelay: 3200,\n    },\n    {\n      elementLoaded: false,\n      elementDelay: 3500,\n    },\n    {\n      elementLoaded: false,\n      elementDelay: 3800,\n    }\n  ];\n  mouseOverAnimation = 'none';\n\n  constructor() {\n  }\n\n  ngOnInit(): void {\n    this.starterAnimation();\n  }\n\n  starterAnimation(): void {\n    setTimeout(() => {\n      this.pageLoaded = true;\n      this.elementToAnimates.forEach(elementToAnimate => {\n        setTimeout(() => {\n          elementToAnimate.elementLoaded = true;\n        }, elementToAnimate.elementDelay);\n      });\n    }, 100);\n  }\n\n  mouseOver($mouseevent: MouseEvent): void {\n    const element = $mouseevent.target as HTMLElement;\n    this.mouseOverAnimation = element.id;\n  }\n\n  mouseLeave(): void {\n    this.mouseOverAnimation = 'none';\n  }\n\n  getAppearAnimation(id: number): string {\n    return this.elementToAnimates[id].elementLoaded ? 'pageAppear' : 'disappear';\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import \"src/style_variables\";\n\n.content {\n  padding: 50px 100px 0 100px;\n  background-image: url(\"~src/assets/about_bckgrnd.png\");\n  height: 100%;\n  width: 100%;\n\n  background-position: center;\n  background-repeat: no-repeat;\n  background-size: cover;\n  background-attachment: fixed;\n}\n\n.welcome-msg {\n  font-size: 50px;\n  color: $primary-text-color;\n  opacity: 0.8;\n}\n\n.text-2 {\n  font-size: 30px;\n  color: $primary-text-color;\n  opacity: 0.8;\n}\n\n.logo {\n  width: 100px;\n  height: 100px;\n}\n\n.content-row {\n  margin: 20px;\n}\n\np {\n  color: $primary-text-color;\n  opacity: 0.8;\n}\n",
                    "styleUrl": "./about.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [],
                "line": 89
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"row content\">\n  <div class=\"col-sm-12 d-flex justify-content-center\"\n       [@translateYNegativeAnimation]=\"this.pageLoaded ? 'notTranslated' : 'translated'\"\n       [@elementAppearAnimation]=\"this.pageLoaded ? 'pageAppear' : 'disappear'\">\n    <h1 class=\"welcome-msg\"><b></b>About</h1>\n  </div>\n  <div class=\"col-sm-12 content-row\">\n    <div class=\"row\">\n      <div class=\"col-sm-3\"\n           [@elementAppearAnimation]=\"this.getAppearAnimation(0)\">\n        <h2 class=\"text-2\">Used Languages <br> and Frameworks</h2>\n      </div>\n      <div class=\"col-sm-9 d-flex justify-content-between\"\n           [@elementAppearAnimation]=\"this.getAppearAnimation(1)\">\n        <img id=\"img1\" src=\"../../assets/logos/angularlogo.png\" class=\"img-fluid logo\"\n             (mouseover)=\"this.mouseOver($event)\"\n             (mouseleave)=\"this.mouseLeave()\"\n             [@mouseOverAnimation]=\"this.mouseOverAnimation === 'img1' ? 'mouseOver' : 'mouseLeave' \"\n             [@elementAppearAnimation]=\"this.getAppearAnimation(2)\">\n        <img id=\"img2\" src=\"../../assets/logos/bootstrap.png\" class=\"img-fluid logo\"\n             (mouseover)=\"this.mouseOver($event)\"\n             (mouseleave)=\"this.mouseLeave()\"\n             [@mouseOverAnimation]=\"this.mouseOverAnimation === 'img2' ? 'mouseOver' : 'mouseLeave' \"\n             [@elementAppearAnimation]=\"this.getAppearAnimation(3)\">\n        <img id=\"img3\" src=\"../../assets/logos/more-01.png\" class=\"img-fluid logo\"\n             (mouseover)=\"this.mouseOver($event)\"\n             (mouseleave)=\"this.mouseLeave()\"\n             [@mouseOverAnimation]=\"this.mouseOverAnimation === 'img3' ? 'mouseOver' : 'mouseLeave' \"\n             [@elementAppearAnimation]=\"this.getAppearAnimation(4)\">\n      </div>\n    </div>\n  </div>\n  <div class=\"col-sm-12 content-row\"\n       [@elementAppearAnimation]=\"this.getAppearAnimation(5)\">\n    <p>Lorem ipsum dolor sit amet, consectetur adipisicing elit. Amet architecto consequatur delectus doloremque ipsa\n      iste molestias natus, optio pariatur quibusdam rerum sequi tempore voluptates. Consectetur illum inventore nemo\n      neque pariatur. Lorem ipsum dolor sit amet, consectetur adipisicing elit. Animi earum fugit ipsum libero\n      necessitatibus sunt, velit! Accusamus animi, at blanditiis cum delectus fugit maxime minus sapiente, sunt velit\n      vero voluptates. Lorem ipsum dolor sit amet, consectetur adipisicing elit. Accusantium animi aut culpa, distinctio\n      dolorem doloremque ea eius exercitationem impedit incidunt molestias nobis omnis quam quisquam quo reprehenderit\n      sapiente soluta, tenetur!</p>\n  </div>\n  <div class=\"col-sm-12 content-row\"\n       [@elementAppearAnimation]=\"this.getAppearAnimation(6)\">\n    <p>Lorem ipsum dolor sit amet, consectetur adipisicing elit. Amet architecto consequatur delectus doloremque ipsa\n      iste molestias natus, optio pariatur quibusdam rerum sequi tempore voluptates. Consectetur illum inventore nemo\n      neque pariatur. Lorem ipsum dolor sit amet, consectetur adipisicing elit. Animi earum fugit ipsum libero\n      necessitatibus sunt, velit! Accusamus animi, at blanditiis cum delectus fugit maxime minus sapiente, sunt velit\n      vero voluptates. Lorem ipsum dolor sit amet, consectetur adipisicing elit. Accusantium animi aut culpa, distinctio\n      dolorem doloremque ea eius exercitationem impedit incidunt molestias nobis omnis quam quisquam quo reprehenderit\n      sapiente soluta, tenetur!</p>\n  </div>\n  <div class=\"col-sm-12 content-row\"\n       [@elementAppearAnimation]=\"this.getAppearAnimation(7)\">\n    <p>Lorem ipsum dolor sit amet, consectetur adipisicing elit. Amet architecto consequatur delectus doloremque ipsa\n      iste molestias natus, optio pariatur quibusdam rerum sequi tempore voluptates. Consectetur illum inventore nemo\n      neque pariatur. Lorem ipsum dolor sit amet, consectetur adipisicing elit. Animi earum fugit ipsum libero\n      necessitatibus sunt, velit! Accusamus animi, at blanditiis cum delectus fugit maxime minus sapiente, sunt velit\n      vero voluptates. Lorem ipsum dolor sit amet, consectetur adipisicing elit. Accusantium animi aut culpa, distinctio\n      dolorem doloremque ea eius exercitationem impedit incidunt molestias nobis omnis quam quisquam quo reprehenderit\n      sapiente soluta, tenetur!</p>\n  </div>\n  <div class=\"col-sm-12 content-row\"\n       [@elementAppearAnimation]=\"this.getAppearAnimation(8)\">\n    <p>Lorem ipsum dolor sit amet, consectetur adipisicing elit. Amet architecto consequatur delectus doloremque ipsa\n      iste molestias natus, optio pariatur quibusdam rerum sequi tempore voluptates. Consectetur illum inventore nemo\n      neque pariatur. Lorem ipsum dolor sit amet, consectetur adipisicing elit. Animi earum fugit ipsum libero\n      necessitatibus sunt, velit! Accusamus animi, at blanditiis cum delectus fugit maxime minus sapiente, sunt velit\n      vero voluptates. Lorem ipsum dolor sit amet, consectetur adipisicing elit. Accusantium animi aut culpa, distinctio\n      dolorem doloremque ea eius exercitationem impedit incidunt molestias nobis omnis quam quisquam quo reprehenderit\n      sapiente soluta, tenetur!</p>\n  </div>\n  <div class=\"col-sm-12 content-row\"\n       [@elementAppearAnimation]=\"this.getAppearAnimation(9)\">\n    <p>Lorem ipsum dolor sit amet, consectetur adipisicing elit. Amet architecto consequatur delectus doloremque ipsa\n      iste molestias natus, optio pariatur quibusdam rerum sequi tempore voluptates. Consectetur illum inventore nemo\n      neque pariatur. Lorem ipsum dolor sit amet, consectetur adipisicing elit. Animi earum fugit ipsum libero\n      necessitatibus sunt, velit! Accusamus animi, at blanditiis cum delectus fugit maxime minus sapiente, sunt velit\n      vero voluptates. Lorem ipsum dolor sit amet, consectetur adipisicing elit. Accusantium animi aut culpa, distinctio\n      dolorem doloremque ea eius exercitationem impedit incidunt molestias nobis omnis quam quisquam quo reprehenderit\n      sapiente soluta, tenetur!</p>\n  </div>\n</div>\n"
        },
        {
            "name": "AppComponent",
            "id": "component-AppComponent-3d0a588405fd45e96beefdb44ff78047",
            "file": "src/app/app.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-root",
            "styleUrls": [
                "./app.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./app.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "title",
                    "defaultValue": "'rick-and-morty-app'",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 9
                }
            ],
            "methodsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.scss']\n})\nexport class AppComponent {\n  title = 'rick-and-morty-app';\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".background {\n  /* Full height */\n  height: 100%;\n  width: 100%;\n}\n\n.content {\n  padding-top: 50px; // because of header\n}\n",
                    "styleUrl": "./app.component.scss"
                }
            ],
            "stylesData": "",
            "templateData": "<div class=\"background\">\n  <app-navbar></app-navbar>\n  <div class=\"content\">\n    <router-outlet></router-outlet>\n  </div>\n  <app-footer></app-footer>\n</div>\n"
        },
        {
            "name": "ButtonComponent",
            "id": "component-ButtonComponent-642c6c4e474cd5a0ac760dfda26b2fc9",
            "file": "src/stories/button.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "storybook-button",
            "styleUrls": [
                "./button.css"
            ],
            "styles": [],
            "template": "<button   type=\"button\"\n   (click)=\"onClick.emit($event)\"\n   [ngClass]=\"classes\"\n   [ngStyle]=\"{ 'background-color': backgroundColor }\"\n >\n   {{ label }}\n </button>",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "backgroundColor",
                    "description": "<p>What background color to use</p>\n",
                    "line": 26,
                    "type": "string"
                },
                {
                    "name": "label",
                    "defaultValue": "'Button'",
                    "description": "<p>Button contents</p>\n",
                    "line": 40
                },
                {
                    "name": "primary",
                    "defaultValue": "false",
                    "description": "<p>Is this the principal call to action on the page?</p>\n",
                    "line": 20
                },
                {
                    "name": "size",
                    "defaultValue": "'medium'",
                    "description": "<p>How large should the button be?</p>\n",
                    "line": 32,
                    "type": "\"small\" | \"medium\" | \"large\""
                }
            ],
            "outputsClass": [
                {
                    "name": "onClick",
                    "defaultValue": "new EventEmitter<Event>()",
                    "description": "<p>Optional click handler</p>\n",
                    "line": 46,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, Input, Output, EventEmitter } from '@angular/core';\n\n@Component({\n  selector: 'storybook-button',\n  template: ` <button\n    type=\"button\"\n    (click)=\"onClick.emit($event)\"\n    [ngClass]=\"classes\"\n    [ngStyle]=\"{ 'background-color': backgroundColor }\"\n  >\n    {{ label }}\n  </button>`,\n  styleUrls: ['./button.css'],\n})\nexport default class ButtonComponent {\n  /**\n   * Is this the principal call to action on the page?\n   */\n  @Input()\n  primary = false;\n\n  /**\n   * What background color to use\n   */\n  @Input()\n  backgroundColor?: string;\n\n  /**\n   * How large should the button be?\n   */\n  @Input()\n  size: 'small' | 'medium' | 'large' = 'medium';\n\n  /**\n   * Button contents\n   *\n   * @required\n   */\n  @Input()\n  label = 'Button';\n\n  /**\n   * Optional click handler\n   */\n  @Output()\n  onClick = new EventEmitter<Event>();\n\n  public get classes(): string[] {\n    const mode = this.primary ? 'storybook-button--primary' : 'storybook-button--secondary';\n\n    return ['storybook-button', `storybook-button--${this.size}`, mode];\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".storybook-button {\n  font-family: 'Nunito Sans', 'Helvetica Neue', Helvetica, Arial, sans-serif;\n  font-weight: 700;\n  border: 0;\n  border-radius: 3em;\n  cursor: pointer;\n  display: inline-block;\n  line-height: 1;\n}\n.storybook-button--primary {\n  color: white;\n  background-color: #1ea7fd;\n}\n.storybook-button--secondary {\n  color: #333;\n  background-color: transparent;\n  box-shadow: rgba(0, 0, 0, 0.15) 0px 0px 0px 1px inset;\n}\n.storybook-button--small {\n  font-size: 12px;\n  padding: 10px 16px;\n}\n.storybook-button--medium {\n  font-size: 14px;\n  padding: 11px 20px;\n}\n.storybook-button--large {\n  font-size: 16px;\n  padding: 12px 24px;\n}\n",
                    "styleUrl": "./button.css"
                }
            ],
            "stylesData": "",
            "accessors": {
                "classes": {
                    "name": "classes",
                    "getSignature": {
                        "name": "classes",
                        "type": "[]",
                        "returnType": "string[]",
                        "line": 48
                    }
                }
            }
        },
        {
            "name": "CharacterDetailComponent",
            "id": "component-CharacterDetailComponent-735c9caa72c4c6a52d1ea65914ebdf01",
            "file": "src/app/core/components/character-detail/character-detail.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-character-detail",
            "styleUrls": [
                "./character-detail.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./character-detail.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "character",
                    "type": "Character",
                    "optional": false,
                    "description": "",
                    "line": 13
                }
            ],
            "methodsClass": [
                {
                    "name": "backButtonClicked",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 22
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 19
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import {Component, OnInit} from '@angular/core';\nimport {Character} from '../../models/character.model';\nimport {ActivatedRoute, Router} from '@angular/router';\nimport {CharacterService} from '../../services/character.service';\n\n@Component({\n  selector: 'app-character-detail',\n  templateUrl: './character-detail.component.html',\n  styleUrls: ['./character-detail.component.scss']\n})\nexport class CharacterDetailComponent implements OnInit {\n\n  character: Character;\n\n  constructor(private route: ActivatedRoute, private router: Router, private characterService: CharacterService) {\n    this.character = this.route.snapshot.data.character;\n  }\n\n  ngOnInit(): void {\n  }\n\n  backButtonClicked(): void {\n    this.router.navigate(['characters']);\n  }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import \"src/style_variables\";\n\n.background {\n  background-image: url(\"~src/assets/character_details_background.png\");\n\n  height: auto;\n  width: auto;\n\n  min-height: 700px;\n\n  background-position: bottom;\n  background-repeat: no-repeat;\n  background-size: cover;\n}\n\n.content-header {\n  padding: 30px;\n}\n\n.character-card-left-side {\n  margin: 10px auto;\n}\n\n.character-card-right-side {\n  margin: 10px auto;\n}\n\n.background-2 {\n  margin: 20px 50px 20px 50px;\n  padding: 30px 20px 30px 20px;\n\n  border-radius: 20px;\n  box-shadow: 0 0 4px 4px rgba(0, 0, 0, .2);\n  background-color: white;\n}\n\n.welcome-msg {\n  font-size: 40px;\n  color: $primary-color-light;\n  opacity: 0.9;\n}\n\n.content-text-1 {\n  color: $primary-text-color;\n}\n\n.character-img {\n  width: 200px;\n  height: 200px;\n  border-radius: 10px;\n}\n\n.status-icon-img {\n  margin: 10px auto 10px auto;\n}\n\n.waiting-msg-container {\n  margin-top: 30px;\n  padding: 40px;\n}\n\n.back-button {\n  margin-top: 20px;\n  width: 50px;\n  height: 150px;\n  background-image: url(\"~src/assets/back-button-img-1.png\");\n  background-position: bottom;\n  background-repeat: no-repeat;\n  background-size: cover;\n\n  &:hover {\n    background-image: url(\"~src/assets/back-button-img-2.png\");\n  }\n\n  cursor: pointer;\n}\n",
                    "styleUrl": "./character-detail.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "route",
                        "type": "ActivatedRoute"
                    },
                    {
                        "name": "router",
                        "type": "Router"
                    },
                    {
                        "name": "characterService",
                        "type": "CharacterService"
                    }
                ],
                "line": 13,
                "jsdoctags": [
                    {
                        "name": "route",
                        "type": "ActivatedRoute",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "characterService",
                        "type": "CharacterService",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"background d-flex justify-content-center\">\n  <div class=\"back-button\" (click)=\"backButtonClicked()\"\n       matTooltip=\"Go back to characters page\" matTooltipPosition=\"left\" >\n  </div>\n  <div *ngIf=\"character; else waitingForCharacter\" class=\"background-2 row\">\n    <div class=\"col-md-12 d-flex justify-content-center content-header\">\n      <b class=\"welcome-msg\">Infos about {{character.name}}</b>\n    </div>\n\n    <div class=\"col-md-6 character-card-left-side\">\n      <div class=\"col-md-12 d-flex justify-content-center\">\n        <img class=\"character-img\" src=\"{{character.image}}\" alt=\"Image about {{character.name}}\">\n      </div>\n    </div>\n    <div class=\"col-md-6 character-card-right-side\">\n      <b class=\"d-flex justify-content-center content-text-1\">Name: {{character.name}}</b>\n      <div class=\"status-icon-img\" matTooltip=\"{{character.status}}\" matTooltipPosition=\"after\"\n           [appCharacterStatusDirective]=\"character.status\">\n      </div>\n      <p class=\"content-text-1 mt-4 d-flex justify-content-center\">Last location: {{character.location.name }}</p>\n      <p class=\"content-text-1 mt-4 d-flex justify-content-center\">Created\n        at: {{character.created | date:'YYYY-MM-dd'}}</p>\n    </div>\n  </div>\n  <ng-template #waitingForCharacter>\n    <div class=\"waiting-msg-container\">\n      <b class=\"welcome-msg\">Waiting For Character to load</b>\n    </div>\n  </ng-template>\n</div>\n\n"
        },
        {
            "name": "CharacterInfiniteListComponent",
            "id": "component-CharacterInfiniteListComponent-ec9212ff08800e717068fa9cc1868abf",
            "file": "src/app/core/components/characters/character-list/character-infinite-list/character-infinite-list.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-character-infinite-list",
            "styleUrls": [
                "./character-infinite-list.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./character-infinite-list.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "characters",
                    "line": 11,
                    "type": "Character[]"
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 16
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import {Component, Input, OnInit} from '@angular/core';\nimport {Character} from '../../../../models/character.model';\n\n@Component({\n  selector: 'app-character-infinite-list',\n  templateUrl: './character-infinite-list.component.html',\n  styleUrls: ['./character-infinite-list.component.scss']\n})\nexport class CharacterInfiniteListComponent implements OnInit {\n\n  @Input() characters: Character[];\n\n  constructor() {\n  }\n\n  ngOnInit(): void {\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import \"src/style_variables\";\n\n.content {\n  margin: 10px 10px 20px 10px;\n  padding: 20px 10px 20px 10px;\n}\n\n.content-text-1 {\n  color: $primary-text-color;\n}\n",
                    "styleUrl": "./character-infinite-list.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [],
                "line": 11
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"row content\">\n  <div class=\"col-md-12\">\n    <div class=\"row d-flex justify-content-center\">\n      <div class=\"col-md-4 d-flex justify-content-start\">\n        <b class=\"content-text-1\">NAME</b>\n      </div>\n      <div class=\"col-md-4 d-flex justify-content-center\">\n        <b class=\"content-text-1\">STATUS</b>\n      </div>\n      <div class=\"col-md-4 d-flex justify-content-end\">\n        <b class=\"content-text-1\">DATE OF CREATION</b>\n      </div>\n    </div>\n    <div *ngFor=\"let character of characters; let character_index = index\">\n      <app-character-list-item [character]=\"character\"></app-character-list-item>\n    </div>\n  </div>\n</div>\n\n"
        },
        {
            "name": "CharacterListItemComponent",
            "id": "component-CharacterListItemComponent-cec9477956e84ce647c53cab41446137",
            "file": "src/app/core/components/characters/character-list-item/character-list-item.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-character-list-item",
            "styleUrls": [
                "./character-list-item.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./character-list-item.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "character",
                    "line": 14,
                    "type": "Character"
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "statusStyle",
                    "defaultValue": "'default'",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 15
                }
            ],
            "methodsClass": [
                {
                    "name": "characterClicked",
                    "args": [
                        {
                            "name": "characterId",
                            "type": "number"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 23,
                    "jsdoctags": [
                        {
                            "name": "characterId",
                            "type": "number",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "mouseLeave",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 43
                },
                {
                    "name": "mouseOver",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 39
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 20
                },
                {
                    "name": "openDialog",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 31
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import {Component, Input, OnInit} from '@angular/core';\nimport {Character} from '../../../models/character.model';\nimport {ActivatedRoute, Router} from '@angular/router';\nimport {NotAliveCharacterDialogComponent} from '../../dialogs/not-alive-character-dialog/not-alive-character-dialog.component';\nimport {MatDialog} from '@angular/material/dialog';\n\n@Component({\n  selector: 'app-character-list-item',\n  templateUrl: './character-list-item.component.html',\n  styleUrls: ['./character-list-item.component.scss']\n})\nexport class CharacterListItemComponent implements OnInit {\n\n  @Input() character: Character;\n  statusStyle = 'default';\n\n  constructor(private router: Router, private route: ActivatedRoute, private dialog: MatDialog) {\n  }\n\n  ngOnInit(): void {\n  }\n\n  characterClicked(characterId: number): void {\n    if (this.character.status.toLowerCase() !== 'alive') {\n      this.openDialog();\n    } else {\n      this.router.navigate([characterId], {relativeTo: this.route});\n    }\n  }\n\n  openDialog(): void {\n    this.dialog.open(NotAliveCharacterDialogComponent, {\n      data: {\n        from: 'character-list-item'\n      }\n    });\n  }\n\n  mouseOver(): void {\n    this.statusStyle = 'mouse-over';\n  }\n\n  mouseLeave(): void {\n    this.statusStyle = 'default';\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import \"src/style_variables\";\n\n.character-row {\n  margin: 5px 0px 5px 0px;\n  padding: 10px 20px 10px 20px;\n  min-width: 750px;\n  border-radius: 5px;\n\n  .content-text-1 {\n    color: #373636;\n  }\n\n  box-shadow: 0 4px 4px -2px rgba(0, 0, 0, .2);\n\n  &:hover {\n    background-color: $primary-color-light;\n\n    .content-text-1 {\n      color: white;\n    }\n  }\n\n  cursor: pointer;\n}\n\n\n.dead-row {\n  &:hover {\n    background-color: rgb(152, 57, 71);\n\n    .content-text-1 {\n      color: white;\n    }\n  }\n\n  cursor: not-allowed;\n}\n",
                    "styleUrl": "./character-list-item.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "router",
                        "type": "Router"
                    },
                    {
                        "name": "route",
                        "type": "ActivatedRoute"
                    },
                    {
                        "name": "dialog",
                        "type": "MatDialog"
                    }
                ],
                "line": 15,
                "jsdoctags": [
                    {
                        "name": "router",
                        "type": "Router",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "route",
                        "type": "ActivatedRoute",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "dialog",
                        "type": "MatDialog",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"row d-flex justify-content-center character-row\"\n     [ngClass]=\"{'dead-row': character.status.toLowerCase() !== 'alive'}\"\n     *ngIf=\"character\"\n     (click)=\"characterClicked(character.id)\"\n     matTooltip=\"Click me for Detailed Info\" matTooltipPosition=\"above\" matTooltipShowDelay=\"1000\"\n     matTooltipDisabled=\"{{character.status.toLowerCase() !== 'alive'}}\"\n     (mouseover)=\"mouseOver()\"\n     (mouseleave)=\"mouseLeave()\">\n\n  <div class=\"col-md-4 d-flex justify-content-start\">\n    <p class=\"content-text-1\">{{character.name}}</p>\n  </div>\n  <div class=\"col-md-4 d-flex justify-content-center\">\n    <div class=\"content-text-1\"\n         matTooltip=\"{{character.status}}\" matTooltipPosition=\"after\"\n         [appCharacterStatusDirective]=\"character.status\"\n         appCharacterStatusStyle=\"{{statusStyle}}\">\n    </div>\n  </div>\n  <div class=\"col-md-4 d-flex justify-content-end\">\n    <p class=\"content-text-1\">{{character.created | date:'YYYY-MM-dd'}}</p>\n  </div>\n</div>\n"
        },
        {
            "name": "CharactersComponent",
            "id": "component-CharactersComponent-ebf69b4baea1a7ae83df21b12ad9687b",
            "file": "src/app/core/components/characters/characters.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-characters",
            "styleUrls": [
                "./characters.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./characters.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "characters",
                    "type": "Character[]",
                    "optional": false,
                    "description": "",
                    "line": 54
                },
                {
                    "name": "elementToAnimates",
                    "defaultValue": "[\n    {\n      elementLoaded: false,\n      elementDelay: 200,\n    },\n    {\n      elementLoaded: false,\n      elementDelay: 400,\n    },\n    {\n      elementLoaded: false,\n      elementDelay: 500,\n    },\n  ]",
                    "type": "[]",
                    "optional": false,
                    "description": "",
                    "line": 65
                },
                {
                    "name": "filterPatternChangedFlag",
                    "defaultValue": "false",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 59
                },
                {
                    "name": "hasNoCharacterMatch",
                    "defaultValue": "false",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 60
                },
                {
                    "name": "infiniteLoop",
                    "defaultValue": "false",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 56
                },
                {
                    "name": "infiniteLoopButtonDisabled",
                    "defaultValue": "this.infiniteLoop",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 57
                },
                {
                    "name": "nameFilterValue",
                    "defaultValue": "''",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 61
                },
                {
                    "name": "pageLoaded",
                    "defaultValue": "false",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 64
                },
                {
                    "name": "statusFilterValue",
                    "defaultValue": "''",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 62
                }
            ],
            "methodsClass": [
                {
                    "name": "filterPatternChanged",
                    "args": [
                        {
                            "name": "target",
                            "type": "any"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 104,
                    "jsdoctags": [
                        {
                            "name": "target",
                            "type": "any",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getAppearAnimation",
                    "args": [
                        {
                            "name": "id",
                            "type": "number"
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 114,
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "number",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "loadCharacters",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 88
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 83
                },
                {
                    "name": "resetFilters",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 138
                },
                {
                    "name": "starterAnimation",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 118
                },
                {
                    "name": "statusFilterChanged",
                    "args": [
                        {
                            "name": "target",
                            "type": "any"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 109,
                    "jsdoctags": [
                        {
                            "name": "target",
                            "type": "any",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "switchListType",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 129
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import {Component, OnInit} from '@angular/core';\nimport {Character} from '../../models/character.model';\nimport {CharacterService} from '../../services/character.service';\nimport {WarningMessageDialogComponent} from '../dialogs/warning-message-dialog/warning-message-dialog.component';\nimport {MatDialog} from '@angular/material/dialog';\nimport {ActivatedRoute} from '@angular/router';\nimport {animate, state, style, transition, trigger} from '@angular/animations';\n\n@Component({\n  selector: 'app-characters',\n  templateUrl: './characters.component.html',\n  styleUrls: ['./characters.component.scss'],\n  animations: [\n    trigger('elementAppearAnimation', [\n      state('disappear', style({\n        opacity: 0.0,\n      })),\n      state('pageAppear', style({\n        opacity: 1,\n      })),\n      transition('disappear => pageAppear', [\n        animate('0.7s')\n      ]),\n      transition('pageAppear => disappear', [\n        animate('0.3s')\n      ]),\n    ]),\n    trigger('translateYNegativeAnimation', [\n      state('translated', style({\n        transform: 'translateY(-50px)',\n      })),\n      state('notTranslated', style({\n        transform: 'translateX(0px)',\n      })),\n      transition('translated => notTranslated', [\n        animate('0.7s')\n      ]),\n    ]),\n    trigger('mouseOverAnimation', [\n      state('mouseOver', style({\n        transform: 'scale(1.2)',\n      })),\n      state('mouseLeave', style({\n        transform: 'scale(1)',\n      })),\n      transition('* => *', [\n        animate('0.3s')\n      ]),\n    ]),\n  ],\n})\nexport class CharactersComponent implements OnInit {\n\n  characters: Character[];\n\n  infiniteLoop = false;\n  infiniteLoopButtonDisabled = this.infiniteLoop;\n\n  filterPatternChangedFlag = false;\n  hasNoCharacterMatch = false;\n  nameFilterValue = '';\n  statusFilterValue = '';\n\n  pageLoaded = false;\n  elementToAnimates = [\n    {\n      elementLoaded: false,\n      elementDelay: 200,\n    },\n    {\n      elementLoaded: false,\n      elementDelay: 400,\n    },\n    {\n      elementLoaded: false,\n      elementDelay: 500,\n    },\n  ];\n\n  constructor(private route: ActivatedRoute, private characterService: CharacterService, private dialog: MatDialog) {\n  }\n\n  ngOnInit(): void {\n    this.starterAnimation();\n    this.characters = this.route.snapshot.data.characters;\n  }\n\n  loadCharacters(): void {\n    this.filterPatternChangedFlag = true;\n    this.characterService.getCharactersByNameAndStatus(this.nameFilterValue, this.statusFilterValue).then(res => {\n      this.characters = res;\n      this.hasNoCharacterMatch = this.characters.length === 0;\n      this.filterPatternChangedFlag = false;\n    }).catch(err => {\n        this.dialog.open(WarningMessageDialogComponent, {\n          data: {\n            why: 'no-character-found'\n          }\n        });\n      }\n    );\n  }\n\n  filterPatternChanged(target: any): void {\n    this.nameFilterValue = target.value;\n    this.loadCharacters();\n  }\n\n  statusFilterChanged(target: any): void {\n    this.statusFilterValue = target.value === 'All' ? '' : target.value;\n    this.loadCharacters();\n  }\n\n  getAppearAnimation(id: number): string {\n    return this.elementToAnimates[id].elementLoaded ? 'pageAppear' : 'disappear';\n  }\n\n  starterAnimation(): void {\n    setTimeout(() => {\n      this.pageLoaded = true;\n      this.elementToAnimates.forEach(elementToAnimate => {\n        setTimeout(() => {\n          elementToAnimate.elementLoaded = true;\n        }, elementToAnimate.elementDelay);\n      });\n    }, 100);\n  }\n\n  switchListType(): void {\n    this.elementToAnimates[2].elementLoaded = false;\n    this.infiniteLoopButtonDisabled = !this.infiniteLoopButtonDisabled;\n    setTimeout(() => {\n      this.infiniteLoop = !this.infiniteLoop;\n      this.elementToAnimates[2].elementLoaded = true;\n    }, 400);\n  }\n\n  resetFilters(): void {\n    this.nameFilterValue = '';\n    this.statusFilterValue = '';\n    this.loadCharacters();\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import \"src/style_variables\";\n\n.page-content {\n  width: auto;\n  height: auto;\n}\n\n.welcome-msg {\n  font-size: 40px;\n  color: $primary-color-light;\n  opacity: 0.9;\n}\n\n.my-primary-button {\n  color: $primary-color-light;\n  border-color: $primary-color-light;\n\n  &:hover {\n    background-color: $primary-color;\n    color: white;\n  }\n\n  &:hover:active {\n    background-color: $primary-color;\n    color: white;\n  }\n\n  &:disabled {\n    background-color: $primary-color-dark;\n    color: white;\n  }\n}\n\n.filter-input {\n  height: 40px;\n  width: 200px;\n}\n\n.list-select-button {\n  height: 40px;\n  width: 200px;\n}\n\n.no-character-div {\n  min-height: 500px;\n}\n\n.no-character-text {\n  font-size: 30px;\n  color: $primary-text-color;\n  opacity: 0.9;\n}\n\n.no-character-img {\n  margin-top: 40px;\n  width: 150px;\n  height: 200px;\n}\n\n.character-list-container {\n    margin: 10px 10px 20px 10px;\n    border-style: solid;\n    border-color: rgb(127, 177, 214, .4);\n    border-radius: 20px;\n    padding: 20px 10px 20px 10px;\n    box-shadow: 0 4px 4px -2px rgba(0, 0, 0, .2);\n}\n\n.reset-button {\n  height: 40px;\n  width: auto;\n}\n\n.status-selector {\n  height: 40px;\n  width: auto;\n}\n",
                    "styleUrl": "./characters.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "route",
                        "type": "ActivatedRoute"
                    },
                    {
                        "name": "characterService",
                        "type": "CharacterService"
                    },
                    {
                        "name": "dialog",
                        "type": "MatDialog"
                    }
                ],
                "line": 78,
                "jsdoctags": [
                    {
                        "name": "route",
                        "type": "ActivatedRoute",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "characterService",
                        "type": "CharacterService",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "dialog",
                        "type": "MatDialog",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"row content d-flex justify-content-center\">\n  <div class=\"col-md-12 header-row p-4\"\n       [@translateYNegativeAnimation]=\"this.pageLoaded ? 'notTranslated' : 'translated'\"\n       [@elementAppearAnimation]=\"this.getAppearAnimation(0)\">\n    <b class=\"welcome-msg d-flex justify-content-center\">Here are some Rick&Morty characters!</b>\n  </div>\n  <div class=\"col-md-12 d-flex justify-content-center custom-control custom-switch mb-3\"\n       [@elementAppearAnimation]=\"this.getAppearAnimation(1)\">\n    <button class=\"btn btn-outline-primary my-primary-button list-select-button\" (click)=\"switchListType()\"\n            [disabled]=\"!infiniteLoopButtonDisabled\"\n            matTooltip=\"Click to change to Simple List\" matTooltipPosition=\"above\"\n            matTooltipShowDelay=\"1000\">\n      Simple List\n    </button>\n    <button class=\"btn btn-outline-primary my-primary-button list-select-button\" (click)=\"switchListType()\"\n            [disabled]=\"infiniteLoopButtonDisabled\"\n            matTooltip=\"Click to change to Infinite List\" matTooltipPosition=\"above\"\n            matTooltipShowDelay=\"1000\">\n      Infinite List\n    </button>\n\n    <div class=\"form-group ml-5\">\n      <input type=\"text\" class=\"form-control filter-input\" id=\"exampleFormControlInput1\" placeholder=\"Filter name\"\n             (change)=\"filterPatternChanged($event.target)\"\n             matTooltip=\"Press Enter or Leave For Searching\" matTooltipPosition=\"right\"\n             matTooltipShowDelay=\"1000\" matTooltipHideDelay=\"1000\"\n             [matTooltipDisabled]=\"filterPatternChangedFlag\">\n    </div>\n\n    <div class=\"form-group\">\n      <select class=\"form-control status-selector\"\n              id=\"statusFilterSelector\"\n              (change)=\"statusFilterChanged($event.target)\">\n        <option>All</option>\n        <option>Alive</option>\n        <option>Dead</option>\n        <option>unknown</option>\n      </select>\n    </div>\n    <button class=\"btn btn-outline-primary my-primary-button reset-button\" (click)=\"resetFilters()\"\n            matTooltip=\"Click to reset your filters\" matTooltipPosition=\"above\"\n            matTooltipShowDelay=\"1000\">\n      Reset\n    </button>\n  </div>\n  <div class=\"col-md-12 d-flex justify-content-center\"\n       [@elementAppearAnimation]=\"this.getAppearAnimation(2)\">\n    <div class=\"character-list-container\" *ngIf=\"!hasNoCharacterMatch; else hasNoCharacterMatchView\">\n      <div *ngIf=\"!infiniteLoop; else infiniteLoopView\">\n        <app-character-simple-list [characters]=\"characters\"></app-character-simple-list>\n      </div>\n      <ng-template #infiniteLoopView>\n        <app-character-infinite-list [characters]=\"characters\"></app-character-infinite-list>\n      </ng-template>\n    </div>\n    <ng-template #hasNoCharacterMatchView>\n      <div class=\"no-character-div\">\n        <div class=\"col-md-12 d-flex justify-content-center\">\n          <b class=\"no-character-text\">Ooopps... No matched character for this pattern.</b>\n        </div>\n        <div class=\"col-md-12 d-flex justify-content-center\">\n          <img src=\"assets/home-img-1.png\" class=\"no-character-img\" alt=\"Home image about Rick\">\n        </div>\n      </div>\n    </ng-template>\n  </div>\n</div>\n"
        },
        {
            "name": "CharacterSimpleListComponent",
            "id": "component-CharacterSimpleListComponent-b0a74107e58beda04a2c9b905512e3bb",
            "file": "src/app/core/components/characters/character-list/character-simple-list/character-simple-list.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-character-simple-list",
            "styleUrls": [
                "./character-simple-list.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./character-simple-list.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "characters",
                    "line": 12,
                    "type": "Character[]"
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "charactersToList",
                    "defaultValue": "new Array<Character>()",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 14
                },
                {
                    "name": "pageConfig",
                    "type": "PageConfig",
                    "optional": false,
                    "description": "",
                    "line": 16
                }
            ],
            "methodsClass": [
                {
                    "name": "getCorrectNumOfListedCharacter",
                    "args": [
                        {
                            "name": "value",
                            "type": "number"
                        }
                    ],
                    "optional": false,
                    "returnType": "number",
                    "typeParameters": [],
                    "line": 69,
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "number",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "initPage",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 29
                },
                {
                    "name": "nextPage",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 57
                },
                {
                    "name": "ngOnChanges",
                    "args": [
                        {
                            "name": "changes",
                            "type": "SimpleChanges"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 25,
                    "jsdoctags": [
                        {
                            "name": "changes",
                            "type": "SimpleChanges",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 21
                },
                {
                    "name": "numberOdListedCharacterChanged",
                    "args": [
                        {
                            "name": "event",
                            "type": "any"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 62,
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "any",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "pageDatarefresh",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 41
                },
                {
                    "name": "pageIndexChanged",
                    "args": [
                        {
                            "name": "target",
                            "type": "any"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 36,
                    "jsdoctags": [
                        {
                            "name": "target",
                            "type": "any",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "prevPage",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 52
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import {Component, Input, OnChanges, OnInit, SimpleChanges} from '@angular/core';\nimport {Character} from '../../../../models/character.model';\nimport {PageConfig} from './page-config';\n\n@Component({\n  selector: 'app-character-simple-list',\n  templateUrl: './character-simple-list.component.html',\n  styleUrls: ['./character-simple-list.component.scss']\n})\nexport class CharacterSimpleListComponent implements OnInit, OnChanges {\n\n  @Input() characters: Character[];\n\n  charactersToList = new Array<Character>();\n\n  pageConfig: PageConfig;\n\n  constructor() {\n  }\n\n  ngOnInit(): void {\n    this.initPage();\n  }\n\n  ngOnChanges(changes: SimpleChanges): void {\n    this.initPage();\n  }\n\n  initPage(): void {\n    this.pageConfig = new PageConfig();\n    this.pageConfig.currentPageIndex = 0;\n    this.pageConfig.numberOfListedCharacter = this.characters.length < 5 ? this.characters.length : 5;\n    this.pageDatarefresh();\n  }\n\n  pageIndexChanged(target: any): void {\n    this.pageConfig.currentPageIndex = +target.value - 1;\n    this.pageDatarefresh();\n  }\n\n  pageDatarefresh(): void {\n    this.pageConfig.numberOfPages = Math.ceil(this.characters.length / this.pageConfig.numberOfListedCharacter);\n    this.pageConfig.pageNumbers = Array.from(Array(this.pageConfig.numberOfPages).keys());\n    const startIndex = this.pageConfig.currentPageIndex * this.pageConfig.numberOfListedCharacter;\n    const endIndex = startIndex + this.pageConfig.numberOfListedCharacter;\n    this.charactersToList.splice(0, this.charactersToList.length);\n    for (let i = startIndex; i < endIndex; i++) {\n      this.charactersToList.push(this.characters[i]);\n    }\n  }\n\n  prevPage(): void {\n    this.pageConfig.currentPageIndex--;\n    this.pageDatarefresh();\n  }\n\n  nextPage(): void {\n    this.pageConfig.currentPageIndex++;\n    this.pageDatarefresh();\n  }\n\n  numberOdListedCharacterChanged(event: any): void {\n    this.pageConfig.currentPageIndex = 0;\n    this.pageConfig.numberOfListedCharacter = this.getCorrectNumOfListedCharacter(+event.value);\n    event.value = this.pageConfig.numberOfListedCharacter;\n    this.pageDatarefresh();\n  }\n\n  getCorrectNumOfListedCharacter(value: number): number {\n    return this.pageConfig.getCorrectNumOfListedCharacter(value, this.characters.length);\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import \"src/style_variables\";\n\n.content {\n  margin: 10px 10px 20px 10px;\n  padding: 20px 10px 20px 10px;\n}\n\n.content-text-1 {\n  color: $primary-text-color;\n}\n\n.content-text-2 {\n  size: 30px;\n  color: #373636;\n}\n\n.form-group-div {\n  width: auto;\n}\n\n.my-primary-button {\n  color: $primary-color-light;\n  border-color: $primary-color-light;\n\n  &:hover {\n    background-color: $primary-color-light;\n    color: white;\n  }\n\n  &:hover:disabled {\n    color: $primary-color-light;\n    background-color: white;\n  }\n}\n\n.page-index-button {\n  height: 40px;\n}\n\n.page-index-selector {\n  height: 40px;\n}\n\n.num-list-characters-form-group {\n  width: auto;\n}\n",
                    "styleUrl": "./character-simple-list.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [],
                "line": 16
            },
            "implements": [
                "OnInit",
                "OnChanges"
            ],
            "templateData": "<div class=\"row content\">\n  <div class=\"col-md-12\">\n    <div class=\"col-md-12 d-flex justify-content-between\">\n      <p>Number of listed items {{this.pageConfig.numberOfListedCharacter}} of {{this.characters.length}}</p>\n      <p>Page {{this.pageConfig.currentPageIndex + 1}} of {{this.pageConfig.numberOfPages}}</p>\n    </div>\n    <div class=\"col-md-12 d-flex justify-content-between\">\n      <div *ngIf=\"pageConfig.pageNumbers.length > 1\" class=\"d-flex justify-content-center\">\n        <button class=\"btn btn-outline-primary my-primary-button page-index-button\" (click)=\"prevPage()\"\n                [disabled]=\"pageConfig.currentPageIndex == 0\">\n          Prev page\n        </button>\n        <div class=\"form-group form-group-div\">\n          <select [selectedIndex]=\"pageConfig.currentPageIndex\" class=\"form-control page-index-selector\"\n                  id=\"currentPageIndex\"\n                  (change)=\"pageIndexChanged($event.target)\">\n            <option *ngFor=\"let i of pageConfig.pageNumbers\">{{i + 1}}</option>\n          </select>\n        </div>\n        <button class=\"btn btn-outline-primary my-primary-button page-index-button\" (click)=\"nextPage()\"\n                [disabled]=\"pageConfig.currentPageIndex == pageConfig.numberOfPages - 1\">Next page\n        </button>\n      </div>\n      <div class=\"form-group\">\n        <input type=\"number\" class=\"form-control num-list-characters-form-group\" id=\"exampleSelect1\" [value]=\"pageConfig.numberOfListedCharacter\"\n               (change)=\"numberOdListedCharacterChanged($event.target)\" [min]=\"1\" [max]=\"characters.length\">\n      </div>\n    </div>\n    <div class=\"row d-flex justify-content-center\">\n      <div class=\"col-md-4 d-flex justify-content-start\">\n        <b class=\"content-text-2\">NAME</b>\n      </div>\n      <div class=\"col-md-4 d-flex justify-content-center\">\n        <b class=\"content-text-2\">STATUS</b>\n      </div>\n      <div class=\"col-md-4 d-flex justify-content-end\">\n        <b class=\"content-text-2\">DATE OF CREATION</b>\n      </div>\n    </div>\n    <div *ngFor=\"let character of charactersToList\">\n      <app-character-list-item [character]=\"character\"></app-character-list-item>\n    </div>\n  </div>\n</div>\n"
        },
        {
            "name": "FooterComponent",
            "id": "component-FooterComponent-868f3962f21c76b835aad91a76be5501",
            "file": "src/app/core/components/footer/footer.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-footer",
            "styleUrls": [
                "./footer.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./footer.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 12
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-footer',\n  templateUrl: './footer.component.html',\n  styleUrls: ['./footer.component.scss']\n})\nexport class FooterComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit(): void {\n  }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import './src/style_variables';\n\n.footer-background {\n  box-shadow: 0 0 4px 4px rgba(0,0,0,.2);\n  background-color: $primary-color-light;\n}\n",
                    "styleUrl": "./footer.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [],
                "line": 8
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<footer class=\" text-white text-center text-lg-start footer-background\">\n  <!-- Grid container -->\n  <div class=\"container p-4\">\n    <!--Grid row-->\n    <div class=\"row\">\n      <!--Grid column-->\n      <div class=\"col-lg-6 col-md-12 mb-4 mb-md-0\">\n        <h5 class=\"text-uppercase\">Footer Content</h5>\n        <p>\n          Lorem ipsum dolor sit amet consectetur, adipisicing elit. Iste atque ea quis\n          molestias. Fugiat pariatur maxime quis culpa corporis vitae repudiandae aliquam\n          voluptatem veniam, est atque cumque eum delectus sint!\n        </p>\n      </div>\n      <!--Grid column-->\n\n      <!--Grid column-->\n      <div class=\"col-lg-3 col-md-6 mb-4 mb-md-0\">\n        <h5 class=\"text-uppercase\">contact us</h5>\n\n        <ul class=\"list-unstyled mb-0\">\n          <li>\n            <a href=\"https://github.com/fodorpapbalazsdev\" class=\"text-white\">Github</a>\n          </li>\n          <li>\n            <a href=\"#!\" class=\"text-white\">Facebook</a>\n          </li>\n          <li>\n            <a href=\"#!\" class=\"text-white\">Twitter</a>\n          </li>\n        </ul>\n      </div>\n      <!--Grid column-->\n\n      <!--Grid column-->\n      <div class=\"col-lg-3 col-md-6 mb-4 mb-md-0\">\n        <h5 class=\"text-uppercase mb-0\">Usage</h5>\n\n        <ul class=\"list-unstyled\">\n          <li>\n            <a href=\"#!\" class=\"text-white\">Privacy</a>\n          </li>\n        </ul>\n      </div>\n      <!--Grid column-->\n    </div>\n    <!--Grid row-->\n  </div>\n  <!-- Grid container -->\n\n  <!-- Copyright -->\n  <div class=\"text-center p-3\" style=\"background-color: rgba(0, 0, 0, 0.2)\">\n    © 2021 Copyright:\n    <a class=\"text-white\" href=\"#!\">fodorpapbalazsdev.com</a>\n  </div>\n  <!-- Copyright -->\n</footer>\n"
        },
        {
            "name": "HeaderComponent",
            "id": "component-HeaderComponent-246e2a69dc126a3bd76c6328dd3b93e2",
            "file": "src/stories/header.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "storybook-header",
            "styleUrls": [
                "./header.css"
            ],
            "styles": [],
            "template": "<header>    <div class=\"wrapper\">\n      <div>\n        <svg width=\"32\" height=\"32\" viewBox=\"0 0 32 32\" xmlns=\"http://www.w3.org/2000/svg\">\n          <g fill=\"none\" fillRule=\"evenodd\">\n            <path\n              d=\"M10 0h12a10 10 0 0110 10v12a10 10 0 01-10 10H10A10 10 0 010 22V10A10 10 0 0110 0z\"\n              fill=\"#FFF\"\n            />\n            <path\n              d=\"M5.3 10.6l10.4 6v11.1l-10.4-6v-11zm11.4-6.2l9.7 5.5-9.7 5.6V4.4z\"\n              fill=\"#555AB9\"\n            />\n            <path\n              d=\"M27.2 10.6v11.2l-10.5 6V16.5l10.5-6zM15.7 4.4v11L6 10l9.7-5.5z\"\n              fill=\"#91BAF8\"\n            />\n          </g>\n        </svg>\n        <h1>Acme</h1>\n      </div>\n      <div>\n        <storybook-button\n          *ngIf=\"user\"\n          size=\"small\"\n          (onClick)=\"onLogout.emit($event)\"\n          label=\"Log out\"\n        ></storybook-button>\n        <storybook-button\n          *ngIf=\"!user\"\n          size=\"small\"\n          (onClick)=\"onLogin.emit($event)\"\n          label=\"Log in\"\n        ></storybook-button>\n        <storybook-button\n          *ngIf=\"!user\"\n          primary\n          size=\"small\"\n          (onClick)=\"onCreateAccount.emit($event)\"\n          label=\"Sign up\"\n        ></storybook-button>\n      </div>\n    </div>\n  </header>",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "user",
                    "defaultValue": "null",
                    "line": 53,
                    "type": "unknown"
                }
            ],
            "outputsClass": [
                {
                    "name": "onCreateAccount",
                    "defaultValue": "new EventEmitter<Event>()",
                    "line": 62,
                    "type": "EventEmitter"
                },
                {
                    "name": "onLogin",
                    "defaultValue": "new EventEmitter<Event>()",
                    "line": 56,
                    "type": "EventEmitter"
                },
                {
                    "name": "onLogout",
                    "defaultValue": "new EventEmitter<Event>()",
                    "line": 59,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, Input, Output, EventEmitter } from '@angular/core';\n\n@Component({\n  selector: 'storybook-header',\n  template: `<header>\n    <div class=\"wrapper\">\n      <div>\n        <svg width=\"32\" height=\"32\" viewBox=\"0 0 32 32\" xmlns=\"http://www.w3.org/2000/svg\">\n          <g fill=\"none\" fillRule=\"evenodd\">\n            <path\n              d=\"M10 0h12a10 10 0 0110 10v12a10 10 0 01-10 10H10A10 10 0 010 22V10A10 10 0 0110 0z\"\n              fill=\"#FFF\"\n            />\n            <path\n              d=\"M5.3 10.6l10.4 6v11.1l-10.4-6v-11zm11.4-6.2l9.7 5.5-9.7 5.6V4.4z\"\n              fill=\"#555AB9\"\n            />\n            <path\n              d=\"M27.2 10.6v11.2l-10.5 6V16.5l10.5-6zM15.7 4.4v11L6 10l9.7-5.5z\"\n              fill=\"#91BAF8\"\n            />\n          </g>\n        </svg>\n        <h1>Acme</h1>\n      </div>\n      <div>\n        <storybook-button\n          *ngIf=\"user\"\n          size=\"small\"\n          (onClick)=\"onLogout.emit($event)\"\n          label=\"Log out\"\n        ></storybook-button>\n        <storybook-button\n          *ngIf=\"!user\"\n          size=\"small\"\n          (onClick)=\"onLogin.emit($event)\"\n          label=\"Log in\"\n        ></storybook-button>\n        <storybook-button\n          *ngIf=\"!user\"\n          primary\n          size=\"small\"\n          (onClick)=\"onCreateAccount.emit($event)\"\n          label=\"Sign up\"\n        ></storybook-button>\n      </div>\n    </div>\n  </header>`,\n  styleUrls: ['./header.css'],\n})\nexport default class HeaderComponent {\n  @Input()\n  user: unknown = null;\n\n  @Output()\n  onLogin = new EventEmitter<Event>();\n\n  @Output()\n  onLogout = new EventEmitter<Event>();\n\n  @Output()\n  onCreateAccount = new EventEmitter<Event>();\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".wrapper {\n  font-family: 'Nunito Sans', 'Helvetica Neue', Helvetica, Arial, sans-serif;\n  border-bottom: 1px solid rgba(0, 0, 0, 0.1);\n  padding: 15px 20px;\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n}\n\nsvg {\n  display: inline-block;\n  vertical-align: top;\n}\n\nh1 {\n  font-weight: 900;\n  font-size: 20px;\n  line-height: 1;\n  margin: 6px 0 6px 10px;\n  display: inline-block;\n  vertical-align: top;\n}\n\nbutton + button {\n  margin-left: 10px;\n}\n",
                    "styleUrl": "./header.css"
                }
            ],
            "stylesData": ""
        },
        {
            "name": "HomeComponent",
            "id": "component-HomeComponent-4ceffe4c36fd09292517dbe20d1f17d2",
            "file": "src/app/core/components/home/home.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-home",
            "styleUrls": [
                "./home.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./home.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "elementToAnimates",
                    "defaultValue": "[\n    {\n      elementLoaded: false,\n      elementDelay: 400,\n    },\n    {\n      elementLoaded: false,\n      elementDelay: 600,\n    },\n    {\n      elementLoaded: false,\n      elementDelay: 700,\n    },\n    {\n      elementLoaded: false,\n      elementDelay: 900,\n    },\n    {\n      elementLoaded: false,\n      elementDelay: 1100,\n    },\n    {\n      elementLoaded: false,\n      elementDelay: 1200,\n    },\n    {\n      elementLoaded: false,\n      elementDelay: 1400,\n    },\n    {\n      elementLoaded: false,\n      elementDelay: 1600,\n    },\n  ]",
                    "type": "[]",
                    "optional": false,
                    "description": "",
                    "line": 37
                },
                {
                    "name": "pageLoaded",
                    "defaultValue": "false",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 36
                }
            ],
            "methodsClass": [
                {
                    "name": "getAppearAnimation",
                    "args": [
                        {
                            "name": "id",
                            "type": "number"
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 94,
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "number",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getStartedButtonClicked",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 90
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 75
                },
                {
                    "name": "starterAnimation",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 79
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import {Component, OnInit} from '@angular/core';\nimport {ActivatedRoute, Router} from '@angular/router';\nimport {animate, state, style, transition, trigger} from '@angular/animations';\n\n@Component({\n  selector: 'app-home',\n  templateUrl: './home.component.html',\n  styleUrls: ['./home.component.scss'],\n  animations: [\n    trigger('elementAppearAnimation', [\n      state('disappear', style({\n        opacity: 0.0,\n      })),\n      state('pageAppear', style({\n        opacity: 1,\n      })),\n      transition('disappear => pageAppear', [\n        animate('0.7s')\n      ]),\n    ]),\n    trigger('translateYNegativeAnimation', [\n      state('translated', style({\n        transform: 'translateY(-50px)',\n      })),\n      state('notTranslated', style({\n        transform: 'translateX(0px)',\n      })),\n      transition('translated => notTranslated', [\n        animate('0.7s')\n      ]),\n    ]),\n  ],\n})\nexport class HomeComponent implements OnInit {\n\n  pageLoaded = false;\n  elementToAnimates = [\n    {\n      elementLoaded: false,\n      elementDelay: 400,\n    },\n    {\n      elementLoaded: false,\n      elementDelay: 600,\n    },\n    {\n      elementLoaded: false,\n      elementDelay: 700,\n    },\n    {\n      elementLoaded: false,\n      elementDelay: 900,\n    },\n    {\n      elementLoaded: false,\n      elementDelay: 1100,\n    },\n    {\n      elementLoaded: false,\n      elementDelay: 1200,\n    },\n    {\n      elementLoaded: false,\n      elementDelay: 1400,\n    },\n    {\n      elementLoaded: false,\n      elementDelay: 1600,\n    },\n  ];\n\n  constructor(private router: Router, private route: ActivatedRoute) {\n  }\n\n  ngOnInit(): void {\n    this.starterAnimation();\n  }\n\n  starterAnimation(): void {\n    setTimeout(() => {\n      this.pageLoaded = true;\n      this.elementToAnimates.forEach(elementToAnimate => {\n        setTimeout(() => {\n          elementToAnimate.elementLoaded = true;\n        }, elementToAnimate.elementDelay);\n      });\n    }, 100);\n  }\n\n  getStartedButtonClicked(): void {\n    this.router.navigate(['/characters'], {relativeTo: this.route});\n  }\n\n  getAppearAnimation(id: number): string {\n    return this.elementToAnimates[id].elementLoaded ? 'pageAppear' : 'disappear';\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import './src/style_variables';\n\n.content {\n  padding: 40px 40px 40px 40px;\n  background-image: url(\"~src/assets/home_background.png\");\n  width: auto;\n  height: auto;\n\n  background-position: center;\n  background-repeat: no-repeat;\n  background-size: cover;\n}\n\n.welcome-msg {\n  font-size: 70px;\n  color: $primary-color-light;\n  opacity: 0.9;\n}\n\n.welcome-alt-msg {\n  font-size: 30px;\n  color: $primary-text-color;\n  opacity: 0.9;\n}\n\n.my-primary-button {\n  box-shadow: 1px 2px 2px 2px rgba(0, 0, 0, .2);\n  color: $primary-color-light;\n  border-color: $primary-color-light;\n\n  &:hover {\n    background-color: $primary-color-light;\n    color: white;\n  }\n}\n\n.arrow-left-img {\n  width: 100px;\n  margin-left: 20px;\n}\n\n.arrow-right-img {\n  width: 100px;\n  margin-right: 20px;\n}\n\n.content-text {\n  color: $primary-text-color;\n  opacity: 0.9;\n}\n\n.content-text-1 {\n  font-size: 40px;\n}\n\n.content-text-2 {\n  font-size: 20px;\n}\n\n.content-row {\n  padding: 100px;\n}\n\n.home-img {\n  height: auto;\n  width: auto;\n  max-width: 500px;\n  max-height: 500px;\n}\n",
                    "styleUrl": "./home.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "router",
                        "type": "Router"
                    },
                    {
                        "name": "route",
                        "type": "ActivatedRoute"
                    }
                ],
                "line": 70,
                "jsdoctags": [
                    {
                        "name": "router",
                        "type": "Router",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "route",
                        "type": "ActivatedRoute",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"row content d-flex justify-content-center\">\n  <div class=\"col-sm-12 header-row p-4\">\n    <b class=\"welcome-msg d-flex justify-content-center\"\n       [@elementAppearAnimation]=\"this.getAppearAnimation(0)\"\n    >Welcome!</b>\n    <b class=\"welcome-alt-msg d-flex justify-content-center\"\n       [@elementAppearAnimation]=\"this.getAppearAnimation(1)\"\n    >Awesome page for Rick&Morty Characters</b>\n    <div class=\"col-sm-12 d-flex justify-content-center p-4\"\n         [@elementAppearAnimation]=\"this.getAppearAnimation(2)\">\n      <img src=\"assets/arrow_right.png\" class=\"arrow-right-img\" alt=\"Arrow Right\">\n      <button (click)=\"getStartedButtonClicked()\" class=\"btn btn-lg btn-outline-primary my-primary-button\"\n              type=\"submit\">Get started\n      </button>\n      <img src=\"assets/arrow_left.png\" class=\"arrow-left-img\" alt=\"Arrow Left\">\n    </div>\n  </div>\n  <div class=\"row col-sm-12 p-4\">\n    <div class=\"col-sm-6 justify-content-center content-row\"\n         [@elementAppearAnimation]=\"this.getAppearAnimation(3)\">\n      <b class=\"content-text content-text-1\">\n        Character Quick Infos\n      </b>\n      <br>\n      <b class=\"content-text content-text-2\">Get info about your favourite character</b>\n      <p>Lorem ipsum dolor sit amet, consectetur adipisicing elit. Ab ad aperiam, architecto aut cumque id itaque maxime\n        minima mollitia odio quas quisquam sit soluta tempora unde vel velit voluptate voluptatibus?</p>\n    </div>\n    <div class=\"col-sm-6 d-flex justify-content-center\"\n         [@elementAppearAnimation]=\"this.getAppearAnimation(4)\">\n      <img src=\"assets/home-img-2.png\" class=\"home-img\" alt=\"Home image about Morty\">\n    </div>\n  </div>\n  <div class=\"row col-sm-12 p-4\">\n    <div class=\"col-sm-6 d-flex justify-content-center\"\n         [@elementAppearAnimation]=\"this.getAppearAnimation(5)\">\n      <img src=\"assets/home-img-1.png\" class=\"home-img\" alt=\"Home image about Rick\">\n    </div>\n    <div class=\"col-sm-6 justify-content-center content-row\"\n         [@elementAppearAnimation]=\"this.getAppearAnimation(6)\">\n      <b class=\"content-text content-text-1\">\n        Get Detailed Infos</b>\n      <br>\n      <b class=\"content-text content-text-2\">Get detailed info about your favourite character</b>\n      <p>Lorem ipsum dolor sit amet, consectetur adipisicing elit. Dolorem eveniet fugit non officiis perspiciatis quia\n        rerum sunt suscipit. Accusamus, doloremque, quaerat? Ab eaque fugiat sequi voluptate voluptatibus. Debitis\n        molestiae, tenetur!</p>\n    </div>\n  </div>\n</div>\n"
        },
        {
            "name": "NavbarComponent",
            "id": "component-NavbarComponent-71cfc4835dcff4c9f8ed116e1e85876f",
            "file": "src/app/core/components/navbar/navbar.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-navbar",
            "styleUrls": [
                "./navbar.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./navbar.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 12
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-navbar',\n  templateUrl: './navbar.component.html',\n  styleUrls: ['./navbar.component.scss']\n})\nexport class NavbarComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit(): void {\n  }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import './src/style_variables';\n\n.navbar {\n  opacity: 0.9;\n  height: 50px;\n  box-shadow: 0 4px 4px -2px rgba(0,0,0,.2);\n}\n\n.home-text {\n  color: $primary-color-light;\n  &:hover {\n    color: $primary-color;\n  }\n}\n",
                    "styleUrl": "./navbar.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [],
                "line": 8
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<nav class=\"navbar navbar-expand-lg navbar-light fixed-top\">\n  <a class=\"navbar-brand home-text\" href=\"/home\">Home</a>\n  <button class=\"navbar-toggler\" type=\"button\" data-toggle=\"collapse\" data-target=\"#navbarSupportedContent\"\n          aria-controls=\"navbarSupportedContent\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\n    <span class=\"navbar-toggler-icon\"></span>\n  </button>\n  <div class=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\n    <ul class=\"navbar-nav mr-auto\">\n      <li class=\"nav-item\">\n        <a class=\"nav-link\" href=\"/characters\" routerLink=\"/characters\" routerLinkActive=\"/characters\">Characters</a>\n      </li>\n      <li class=\"nav-item\">\n        <a class=\"nav-link\" href=\"/about\" routerLink=\"/about\" routerLinkActive=\"/about\">About</a>\n      </li>\n    </ul>\n  </div>\n</nav>\n"
        },
        {
            "name": "NotAliveCharacterDialogComponent",
            "id": "component-NotAliveCharacterDialogComponent-6228d2535bac07fde6c9e9eadbbdc595",
            "file": "src/app/core/components/dialogs/not-alive-character-dialog/not-alive-character-dialog.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-not-alive-character-dialog",
            "styleUrls": [
                "./not-alive-character-dialog.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./not-alive-character-dialog.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "data",
                    "type": "DialogData",
                    "optional": false,
                    "description": "",
                    "line": 15,
                    "decorators": [
                        {
                            "name": "Inject",
                            "stringifiedArguments": "MAT_DIALOG_DATA"
                        }
                    ],
                    "modifierKind": [
                        114
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 17
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import {Component, Inject, OnInit} from '@angular/core';\nimport {MAT_DIALOG_DATA} from '@angular/material/dialog';\n\nexport interface DialogData {\n  from: 'character-list-item' | 'character-alive-guard';\n}\n\n@Component({\n  selector: 'app-not-alive-character-dialog',\n  templateUrl: './not-alive-character-dialog.component.html',\n  styleUrls: ['./not-alive-character-dialog.component.scss']\n})\nexport class NotAliveCharacterDialogComponent implements OnInit {\n\n  constructor(@Inject(MAT_DIALOG_DATA) public data: DialogData) { }\n\n  ngOnInit(): void {\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import \"src/style_variables\";\n\n.content {\n  padding: 50px;\n}\n\n.content-text-1 {\n  color: $primary-text-color;\n}\n",
                    "styleUrl": "./not-alive-character-dialog.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "data",
                        "type": "DialogData"
                    }
                ],
                "line": 13,
                "jsdoctags": [
                    {
                        "name": "data",
                        "type": "DialogData",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"content\">\n  <div *ngIf=\"data.from === 'character-list-item'\" class=\"row\">\n    <div class=\"col-md-12 d-flex justify-content-center\">\n      <b class=\"content-text-1\">Sorry.. We can't open dead characters.</b>\n    </div>\n    <div class=\"col-md-12 d-flex justify-content-center\">\n      <div [appCharacterStatusDirective]=\"'dead'\" class=\"mt-4\"></div>\n    </div>\n  </div>\n  <b *ngIf=\"data.from === 'character-alive-guard'\" class=\"content-text-1\">Url based character loading not allowed!</b>\n</div>\n"
        },
        {
            "name": "PageComponent",
            "id": "component-PageComponent-cca1a8911321fa17756ce90c90de65cc",
            "file": "src/stories/page.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "storybook-page",
            "styleUrls": [
                "./page.css"
            ],
            "styles": [],
            "template": "<article>    <storybook-header\n      [user]=\"user\"\n      (onLogout)=\"onLogout.emit($event)\"\n      (onLogin)=\"onLogin.emit($event)\"\n      (onCreateAccount)=\"onCreateAccount.emit($event)\"\n    ></storybook-header>\n    <section>\n      <h2>Pages in Storybook</h2>\n      <p>\n        We recommend building UIs with a\n        <a href=\"https://componentdriven.org\" target=\"_blank\" rel=\"noopener noreferrer\">\n          <strong>component-driven</strong>\n        </a>\n        process starting with atomic components and ending with pages.\n      </p>\n      <p>\n        Render pages with mock data. This makes it easy to build and review page states without\n        needing to navigate to them in your app. Here are some handy patterns for managing page data\n        in Storybook:\n      </p>\n      <ul>\n        <li>\n          Use a higher-level connected component. Storybook helps you compose such data from the\n          \"args\" of child component stories\n        </li>\n        <li>\n          Assemble data in the page component from your services. You can mock these services out\n          using Storybook.\n        </li>\n      </ul>\n      <p>\n        Get a guided tutorial on component-driven development at\n        <a href=\"https://www.learnstorybook.com\" target=\"_blank\" rel=\"noopener noreferrer\">\n          Learn Storybook\n        </a>\n        . Read more in the\n        <a href=\"https://storybook.js.org/docs\" target=\"_blank\" rel=\"noopener noreferrer\">\n          docs\n        </a>\n        .\n      </p>\n      <div class=\"tip-wrapper\">\n        <span class=\"tip\">Tip</span> Adjust the width of the canvas with the\n        <svg width=\"10\" height=\"10\" viewBox=\"0 0 12 12\" xmlns=\"http://www.w3.org/2000/svg\">\n          <g fill=\"none\" fillRule=\"evenodd\">\n            <path\n              d=\"M1.5 5.2h4.8c.3 0 .5.2.5.4v5.1c-.1.2-.3.3-.4.3H1.4a.5.5 0 01-.5-.4V5.7c0-.3.2-.5.5-.5zm0-2.1h6.9c.3 0 .5.2.5.4v7a.5.5 0 01-1 0V4H1.5a.5.5 0 010-1zm0-2.1h9c.3 0 .5.2.5.4v9.1a.5.5 0 01-1 0V2H1.5a.5.5 0 010-1zm4.3 5.2H2V10h3.8V6.2z\"\n              id=\"a\"\n              fill=\"#999\"\n            />\n          </g>\n        </svg>\n        Viewports addon in the toolbar\n      </div>\n    </section>\n  </article>",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "user",
                    "defaultValue": "null",
                    "line": 66,
                    "type": "unknown"
                }
            ],
            "outputsClass": [
                {
                    "name": "onCreateAccount",
                    "defaultValue": "new EventEmitter<Event>()",
                    "line": 75,
                    "type": "EventEmitter"
                },
                {
                    "name": "onLogin",
                    "defaultValue": "new EventEmitter<Event>()",
                    "line": 69,
                    "type": "EventEmitter"
                },
                {
                    "name": "onLogout",
                    "defaultValue": "new EventEmitter<Event>()",
                    "line": 72,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, Input, Output, EventEmitter } from '@angular/core';\n\n@Component({\n  selector: 'storybook-page',\n  template: `<article>\n    <storybook-header\n      [user]=\"user\"\n      (onLogout)=\"onLogout.emit($event)\"\n      (onLogin)=\"onLogin.emit($event)\"\n      (onCreateAccount)=\"onCreateAccount.emit($event)\"\n    ></storybook-header>\n    <section>\n      <h2>Pages in Storybook</h2>\n      <p>\n        We recommend building UIs with a\n        <a href=\"https://componentdriven.org\" target=\"_blank\" rel=\"noopener noreferrer\">\n          <strong>component-driven</strong>\n        </a>\n        process starting with atomic components and ending with pages.\n      </p>\n      <p>\n        Render pages with mock data. This makes it easy to build and review page states without\n        needing to navigate to them in your app. Here are some handy patterns for managing page data\n        in Storybook:\n      </p>\n      <ul>\n        <li>\n          Use a higher-level connected component. Storybook helps you compose such data from the\n          \"args\" of child component stories\n        </li>\n        <li>\n          Assemble data in the page component from your services. You can mock these services out\n          using Storybook.\n        </li>\n      </ul>\n      <p>\n        Get a guided tutorial on component-driven development at\n        <a href=\"https://www.learnstorybook.com\" target=\"_blank\" rel=\"noopener noreferrer\">\n          Learn Storybook\n        </a>\n        . Read more in the\n        <a href=\"https://storybook.js.org/docs\" target=\"_blank\" rel=\"noopener noreferrer\">\n          docs\n        </a>\n        .\n      </p>\n      <div class=\"tip-wrapper\">\n        <span class=\"tip\">Tip</span> Adjust the width of the canvas with the\n        <svg width=\"10\" height=\"10\" viewBox=\"0 0 12 12\" xmlns=\"http://www.w3.org/2000/svg\">\n          <g fill=\"none\" fillRule=\"evenodd\">\n            <path\n              d=\"M1.5 5.2h4.8c.3 0 .5.2.5.4v5.1c-.1.2-.3.3-.4.3H1.4a.5.5 0 01-.5-.4V5.7c0-.3.2-.5.5-.5zm0-2.1h6.9c.3 0 .5.2.5.4v7a.5.5 0 01-1 0V4H1.5a.5.5 0 010-1zm0-2.1h9c.3 0 .5.2.5.4v9.1a.5.5 0 01-1 0V2H1.5a.5.5 0 010-1zm4.3 5.2H2V10h3.8V6.2z\"\n              id=\"a\"\n              fill=\"#999\"\n            />\n          </g>\n        </svg>\n        Viewports addon in the toolbar\n      </div>\n    </section>\n  </article>`,\n  styleUrls: ['./page.css'],\n})\nexport default class PageComponent {\n  @Input()\n  user: unknown = null;\n\n  @Output()\n  onLogin = new EventEmitter<Event>();\n\n  @Output()\n  onLogout = new EventEmitter<Event>();\n\n  @Output()\n  onCreateAccount = new EventEmitter<Event>();\n}\n\n// export const Page = ({ user, onLogin, onLogout, onCreateAccount }) => (\n//   <article>\n//     <Header user={user} onLogin={onLogin} onLogout={onLogout} onCreateAccount={onCreateAccount} />\n\n// );\n// Page.propTypes = {\n//   user: PropTypes.shape({}),\n//   onLogin: PropTypes.func.isRequired,\n//   onLogout: PropTypes.func.isRequired,\n//   onCreateAccount: PropTypes.func.isRequired,\n// };\n\n// Page.defaultProps = {\n//   user: null,\n// };\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "section {\n  font-family: 'Nunito Sans', 'Helvetica Neue', Helvetica, Arial, sans-serif;\n  font-size: 14px;\n  line-height: 24px;\n  padding: 48px 20px;\n  margin: 0 auto;\n  max-width: 600px;\n  color: #333;\n}\n\nh2 {\n  font-weight: 900;\n  font-size: 32px;\n  line-height: 1;\n  margin: 0 0 4px;\n  display: inline-block;\n  vertical-align: top;\n}\n\np {\n  margin: 1em 0;\n}\n\na {\n  text-decoration: none;\n  color: #1ea7fd;\n}\n\nul {\n  padding-left: 30px;\n  margin: 1em 0;\n}\n\nli {\n  margin-bottom: 8px;\n}\n\n.tip {\n  display: inline-block;\n  border-radius: 1em;\n  font-size: 11px;\n  line-height: 12px;\n  font-weight: 700;\n  background: #e7fdd8;\n  color: #66bf3c;\n  padding: 4px 12px;\n  margin-right: 10px;\n  vertical-align: top;\n}\n\n.tip-wrapper {\n  font-size: 13px;\n  line-height: 20px;\n  margin-top: 40px;\n  margin-bottom: 40px;\n}\n\n.tip-wrapper svg {\n  display: inline-block;\n  height: 12px;\n  width: 12px;\n  margin-right: 4px;\n  vertical-align: top;\n  margin-top: 3px;\n}\n\n.tip-wrapper svg path {\n  fill: #1ea7fd;\n}\n",
                    "styleUrl": "./page.css"
                }
            ],
            "stylesData": ""
        },
        {
            "name": "WarningMessageDialogComponent",
            "id": "component-WarningMessageDialogComponent-a26ea4057c996dbeeb5f2d65bd725320",
            "file": "src/app/core/components/dialogs/warning-message-dialog/warning-message-dialog.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-warning-message-dialog",
            "styleUrls": [
                "./warning-message-dialog.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./warning-message-dialog.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "data",
                    "type": "DialogData",
                    "optional": false,
                    "description": "",
                    "line": 15,
                    "decorators": [
                        {
                            "name": "Inject",
                            "stringifiedArguments": "MAT_DIALOG_DATA"
                        }
                    ],
                    "modifierKind": [
                        114
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 17
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import {Component, Inject, OnInit} from '@angular/core';\nimport {MAT_DIALOG_DATA} from '@angular/material/dialog';\n\nexport interface DialogData {\n  why: 'no-character-found';\n}\n\n@Component({\n  selector: 'app-warning-message-dialog',\n  templateUrl: './warning-message-dialog.component.html',\n  styleUrls: ['./warning-message-dialog.component.scss']\n})\nexport class WarningMessageDialogComponent implements OnInit {\n\n  constructor(@Inject(MAT_DIALOG_DATA) public data: DialogData) { }\n\n  ngOnInit(): void {\n  }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import \"src/style_variables\";\n\n.content {\n  padding: 50px;\n}\n\n.content-text-1 {\n  color: $primary-text-color;\n}\n",
                    "styleUrl": "./warning-message-dialog.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "data",
                        "type": "DialogData"
                    }
                ],
                "line": 13,
                "jsdoctags": [
                    {
                        "name": "data",
                        "type": "DialogData",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"content\">\n  <div *ngIf=\"data.why === 'no-character-found'\" class=\"row\">\n    <div class=\"col-md-12 d-flex justify-content-center\">\n      <b class=\"content-text-1\">Sorry.. We can't found character based on your filter.</b>\n    </div>\n  </div>\n</div>\n"
        }
    ],
    "modules": [
        {
            "name": "AppModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "AboutComponent"
                        },
                        {
                            "name": "AppComponent"
                        },
                        {
                            "name": "CharacterDetailComponent"
                        },
                        {
                            "name": "CharacterInfiniteListComponent"
                        },
                        {
                            "name": "CharacterListItemComponent"
                        },
                        {
                            "name": "CharacterSimpleListComponent"
                        },
                        {
                            "name": "CharacterStatusDirectiveDirective"
                        },
                        {
                            "name": "CharactersComponent"
                        },
                        {
                            "name": "FooterComponent"
                        },
                        {
                            "name": "HomeComponent"
                        },
                        {
                            "name": "NavbarComponent"
                        },
                        {
                            "name": "NotAliveCharacterDialogComponent"
                        },
                        {
                            "name": "WarningMessageDialogComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "AppRoutingModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": [
                        {
                            "name": "AppComponent"
                        }
                    ]
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "AppRoutingModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        }
    ],
    "miscellaneous": {
        "variables": [
            {
                "name": "context",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/test.ts",
                "type": "",
                "defaultValue": "require.context('./', true, /\\.spec\\.ts$/)"
            },
            {
                "name": "environment",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/environments/environment.prod.ts",
                "type": "object",
                "defaultValue": "{\n  production: true\n}"
            },
            {
                "name": "environment",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/environments/environment.ts",
                "type": "object",
                "defaultValue": "{\n  production: false\n}"
            },
            {
                "name": "Large",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Button.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "LoggedIn",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Header.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "LoggedIn",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Page.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "LoggedOut",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Header.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "LoggedOut",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Page.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Primary",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Button.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "require",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/test.ts",
                "type": "literal type"
            },
            {
                "name": "Secondary",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Button.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Small",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Button.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Button.stories.ts",
                "type": "Story<Button>",
                "defaultValue": "(args: Button) => ({\n  component: Button,\n  props: args,\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Header.stories.ts",
                "type": "Story<Header>",
                "defaultValue": "(args: Header) => ({\n  component: Header,\n  props: args,\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Page.stories.ts",
                "type": "Story<Page>",
                "defaultValue": "(args: Page) => ({\n  component: Page,\n  props: args,\n})"
            }
        ],
        "functions": [],
        "typealiases": [],
        "enumerations": [],
        "groupedVariables": {
            "src/test.ts": [
                {
                    "name": "context",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/test.ts",
                    "type": "",
                    "defaultValue": "require.context('./', true, /\\.spec\\.ts$/)"
                },
                {
                    "name": "require",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/test.ts",
                    "type": "literal type"
                }
            ],
            "src/environments/environment.prod.ts": [
                {
                    "name": "environment",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/environments/environment.prod.ts",
                    "type": "object",
                    "defaultValue": "{\n  production: true\n}"
                }
            ],
            "src/environments/environment.ts": [
                {
                    "name": "environment",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/environments/environment.ts",
                    "type": "object",
                    "defaultValue": "{\n  production: false\n}"
                }
            ],
            "src/stories/Button.stories.ts": [
                {
                    "name": "Large",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Button.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Primary",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Button.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Secondary",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Button.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Small",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Button.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Button.stories.ts",
                    "type": "Story<Button>",
                    "defaultValue": "(args: Button) => ({\n  component: Button,\n  props: args,\n})"
                }
            ],
            "src/stories/Header.stories.ts": [
                {
                    "name": "LoggedIn",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Header.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "LoggedOut",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Header.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Header.stories.ts",
                    "type": "Story<Header>",
                    "defaultValue": "(args: Header) => ({\n  component: Header,\n  props: args,\n})"
                }
            ],
            "src/stories/Page.stories.ts": [
                {
                    "name": "LoggedIn",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Page.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "LoggedOut",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Page.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Page.stories.ts",
                    "type": "Story<Page>",
                    "defaultValue": "(args: Page) => ({\n  component: Page,\n  props: args,\n})"
                }
            ]
        },
        "groupedFunctions": {},
        "groupedEnumerations": {},
        "groupedTypeAliases": {}
    },
    "routes": {
        "name": "<root>",
        "kind": "module",
        "className": "AppModule",
        "children": [
            {
                "name": "routes",
                "filename": "src/app/app-routing.module.ts",
                "module": "AppRoutingModule",
                "children": [
                    {
                        "path": "home",
                        "component": "HomeComponent"
                    },
                    {
                        "path": "characters",
                        "component": "CharactersComponent",
                        "resolve": {
                            "characters": "CharacterResolverService"
                        }
                    },
                    {
                        "path": "characters/:id",
                        "component": "CharacterDetailComponent",
                        "canActivate": [
                            "CharacterAliveGuardService"
                        ],
                        "resolve": {
                            "character": "CharacterDetailResolverService"
                        }
                    },
                    {
                        "path": "about",
                        "component": "AboutComponent"
                    },
                    {
                        "path": "**",
                        "redirectTo": "home"
                    }
                ],
                "kind": "module"
            }
        ]
    },
    "coverage": {
        "count": 2,
        "status": "low",
        "files": [
            {
                "filePath": "e2e/src/app.po.ts",
                "type": "class",
                "linktype": "classe",
                "name": "AppPage",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/app.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "AppComponent",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/core/components/about/about.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "AboutComponent",
                "coveragePercent": 0,
                "coverageCount": "0/10",
                "status": "low"
            },
            {
                "filePath": "src/app/core/components/character-detail/character-detail-resolver.service.ts",
                "type": "guard",
                "linktype": "guard",
                "name": "CharacterDetailResolverService",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/core/components/character-detail/character-detail.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "CharacterDetailComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/core/components/characters/character-list-item/character-list-item.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "CharacterListItemComponent",
                "coveragePercent": 0,
                "coverageCount": "0/9",
                "status": "low"
            },
            {
                "filePath": "src/app/core/components/characters/character-list/character-infinite-list/character-infinite-list.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "CharacterInfiniteListComponent",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/core/components/characters/character-list/character-simple-list/character-simple-list.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "CharacterSimpleListComponent",
                "coveragePercent": 0,
                "coverageCount": "0/14",
                "status": "low"
            },
            {
                "filePath": "src/app/core/components/characters/character-list/character-simple-list/page-config.ts",
                "type": "class",
                "linktype": "classe",
                "name": "PageConfig",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/core/components/characters/character-resolver.service.ts",
                "type": "guard",
                "linktype": "guard",
                "name": "CharacterResolverService",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/core/components/characters/characters.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "CharactersComponent",
                "coveragePercent": 0,
                "coverageCount": "0/19",
                "status": "low"
            },
            {
                "filePath": "src/app/core/components/dialogs/not-alive-character-dialog/not-alive-character-dialog.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "NotAliveCharacterDialogComponent",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/core/components/dialogs/not-alive-character-dialog/not-alive-character-dialog.component.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "DialogData",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/core/components/dialogs/warning-message-dialog/warning-message-dialog.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "WarningMessageDialogComponent",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/core/components/dialogs/warning-message-dialog/warning-message-dialog.component.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "DialogData",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/core/components/directives/character-status-directive.directive.ts",
                "type": "directive",
                "linktype": "directive",
                "name": "CharacterStatusDirectiveDirective",
                "coveragePercent": 0,
                "coverageCount": "0/8",
                "status": "low"
            },
            {
                "filePath": "src/app/core/components/footer/footer.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "FooterComponent",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/core/components/home/home.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "HomeComponent",
                "coveragePercent": 0,
                "coverageCount": "0/8",
                "status": "low"
            },
            {
                "filePath": "src/app/core/components/navbar/navbar.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "NavbarComponent",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/core/models/api-response-model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ApiResponse",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/core/models/character.model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "Character",
                "coveragePercent": 0,
                "coverageCount": "0/10",
                "status": "low"
            },
            {
                "filePath": "src/app/core/services/character-alive-guard.service.ts",
                "type": "guard",
                "linktype": "guard",
                "name": "CharacterAliveGuardService",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/core/services/character.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "CharacterService",
                "coveragePercent": 0,
                "coverageCount": "0/8",
                "status": "low"
            },
            {
                "filePath": "src/environments/environment.prod.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "environment",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/environments/environment.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "environment",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Large",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Primary",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Secondary",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Small",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Header.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "LoggedIn",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Header.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "LoggedOut",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Header.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Page.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "LoggedIn",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Page.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "LoggedOut",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Page.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/button.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ButtonComponent",
                "coveragePercent": 83,
                "coverageCount": "5/6",
                "status": "very-good"
            },
            {
                "filePath": "src/stories/header.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "HeaderComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/stories/page.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "PageComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/test.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "context",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/test.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "require",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            }
        ]
    }
}